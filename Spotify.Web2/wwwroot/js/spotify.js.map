{"version":3,"file":"spotify.js","sourceRoot":"","sources":["../ts/spotify.ts"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,kDAAkD;AAElD,IAAI,OAAO,GAAG;IAEV,SAAS,EAAT,UAAU,OAAe;QACrB,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAA;IACvD,CAAC;IACD,SAAS,EAAT,UAAU,OAAe;QACrB,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAA;IACxD,CAAC;IAED,oBAAoB;QAChB,CAAC,CAAC,IAAI,CAAC;YACH,GAAG,EAAE,8BAA8B;YACnC,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,UAAC,QAAQ;gBAEd,8CAA8C;gBAC9C,IAAI,iBAAiB,GAAG,CAAC,CAAC,oBAAoB,CAAC,CAAA;gBAE/C,IAAI,QAAQ,KAAK,IAAI,EAAE;oBACnB,qDAAqD;oBACrD,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;iBAC7B;qBACI,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE;oBAC/D,yDAAyD;iBAC5D;qBAAM;oBACH,gEAAgE;oBAChE,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;oBAC1B,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;yBAChD,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;yBAC/B,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;yBAC9C,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;yBAC/B,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;yBACjC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC;yBAClB,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;yBACnB,KAAK,CAAC,cAAM,OAAA,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAnC,CAAmC,CAAC,CAAA;iBACxD;YACL,CAAC;YACD,KAAK,EAAE,UAAC,KAAK;gBACT,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YACxB,CAAC;SACJ,CAAC,CAAA;IACN,CAAC;IACD,IAAI;QACA,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,oBAAoB,EAAE,MAAM,CAAC,4BAA4B,CAAC,CAAA;IAC3F,CAAC;CACJ,CAAA","sourcesContent":["/// <reference path=\"../lib/jquery/dist/jquery.d.ts\" />\r\n/// <reference path=\"../lib/jqgrid/jqGrid.d.ts\" />\r\n\r\nvar spotify = {\r\n\r\n    openTrack(trackId: string) {\r\n        router.open(\"/Spotify/Track\", { trackId: trackId })\r\n    },\r\n    openGroup(groupId: string) {\r\n        router.open(\"/Spotify/Groups\", { groupId: groupId })\r\n    },\r\n\r\n    loadCurrentlyPlaying() {\r\n        $.ajax({\r\n            url: \"/Spotify/GetCurrentlyPlaying\",\r\n            type: \"POST\",\r\n            success: (response) => {\r\n\r\n                //console.debug(\"CurrentlyPlaying:\", response)\r\n                var $currentlyPlaying = $(\"#currently-playing\")\r\n\r\n                if (response === null) {\r\n                    //console.debug(\"Nothing is playing, removing image\")\r\n                    $currentlyPlaying.html(\"\")\r\n                }\r\n                else if ($currentlyPlaying.attr(\"data-uri\") === response.Item.Uri) {\r\n                    //console.debug(\"Currently playing image is already set\")\r\n                } else {\r\n                    //console.debug(\"Currently playing image needs to be set again\")\r\n                    $currentlyPlaying.html(\"\")\r\n                    $currentlyPlaying.attr(\"data-uri\", response.Item.Uri)\r\n                        .append(\"<img>\").children(\"img\")\r\n                        .attr(\"src\", response.Item.Album.Images[1].Url)\r\n                        .attr(\"alt\", response.Item.Name)\r\n                        .attr(\"title\", response.Item.Name)\r\n                        .attr(\"width\", 120)\r\n                        .attr(\"height\", 120)\r\n                        .click(() => spotify.openTrack(response.Item.Id))\r\n                }\r\n            },\r\n            error: (error) => {\r\n                console.error(error)\r\n            }\r\n        })\r\n    },\r\n    init() {\r\n        helpers.interval.set(spotify.loadCurrentlyPlaying, config.loadCurrentlyPlayingInterval)\r\n    }\r\n}\r\n\r\n"]}